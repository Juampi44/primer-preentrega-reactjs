{"ast":null,"code":"// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n// import findPollyFill from 'core-js-pure/actual/array/find'\n\n// const array1 = [5, 12, 8, 130, 44];\n\n// let find = array1.findPollyFill(\n//   (element) => element > 10\n// );\n\n// console.log(find)\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// let arr = [1,2,3];\n// let arr2 = [4,5];\n\n/* esto es concatenar un array */\n// const concat = arr.concat(arr2);\n/* ese de arriba y el de abajo son iguales */\n// const concat = (arr = [...arr, ...arr2]);\n// console.log(concat);\n\n/* para clonar un array se hace esto */\n\n// let copyArr = arr; /* no clona, solo hace una referencia al original */\n// copyArr.push(4);\n\n// const copyArrSpreadOP = [...arr]\n// copyArrSpreadOP.push(4)\n// console.log(arr);\n\n/* Expandir un array se hace asi: */\n\n// const copyArrSpreadOPExp = [arr, 4];\n// console.log(copyArrSpreadOPExp);\n\n/* funciones matematicas: */\n\n// const min = Math.min(...arr);\n// console.log(min)\n\n// const max = Math.max(...arr , ...arr2);\n// console.log(max)\n\n/* operador de propagacion con objetos: */\n\n// const usuario = {\n//   name: \"Felipe\" ,\n//   edad: 25 ,\n// }\n\n// const alumno = {\n//   clase: \"reactjs\",\n//   promedio: 5\n// }\n\n// const alumnoCh = {...usuario , ...alumno, idCh: 12};\n// console.log(alumnoCh);\n\n/* Propiedades dinamicas: */ /* en esta sume los nombres de la lista */\n\n// const obUsuarios = {\n//   usuario_5: \"david\"\n// }\n// const nombres = [\"jon\" , \"irma\" , \"miguel\" , \"sara\"]\n\n// nombres.forEach(\n//   (nombre , index) => (\n//     obUsuarios[`usuario_${index}`] = nombre\n//   )\n// )\n// console.log(obUsuarios);\n\n/* DEEP MATCHING: */\n\n// const usuario = {\n//   name: \"Felipe\" ,\n//   edad: 25 ,\n// }\n\n// let {name , edad} = usuario;\n// console.log(name , edad);\n\n/*  asignacion en desestructuracion */\n\n// let persona = [\"jon\" , \"smith\"];\n// let [nombre , apellido] = persona;\n\n// let [nombre , apellido] = \"jons smiths\".split(\" \")\n// console.log(nombre , apellido);","map":{"version":3,"names":[],"sources":["C:/proyecto_react/primer-proyecto/src/index.js"],"sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n// import findPollyFill from 'core-js-pure/actual/array/find'\n\n// const array1 = [5, 12, 8, 130, 44];\n\n// let find = array1.findPollyFill(\n//   (element) => element > 10\n// );\n\n// console.log(find)\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n\n\n\n// let arr = [1,2,3];\n// let arr2 = [4,5];\n\n\n/* esto es concatenar un array */\n// const concat = arr.concat(arr2);\n  /* ese de arriba y el de abajo son iguales */\n// const concat = (arr = [...arr, ...arr2]);\n// console.log(concat);\n\n\n/* para clonar un array se hace esto */\n\n// let copyArr = arr; /* no clona, solo hace una referencia al original */\n// copyArr.push(4);\n\n// const copyArrSpreadOP = [...arr]\n// copyArrSpreadOP.push(4)\n// console.log(arr);\n\n\n/* Expandir un array se hace asi: */\n\n// const copyArrSpreadOPExp = [arr, 4];\n// console.log(copyArrSpreadOPExp);\n\n/* funciones matematicas: */\n\n// const min = Math.min(...arr);\n// console.log(min)\n\n// const max = Math.max(...arr , ...arr2);\n// console.log(max)\n\n\n/* operador de propagacion con objetos: */\n\n// const usuario = {\n//   name: \"Felipe\" ,\n//   edad: 25 ,\n// }\n\n// const alumno = {\n//   clase: \"reactjs\",\n//   promedio: 5\n// }\n\n// const alumnoCh = {...usuario , ...alumno, idCh: 12};\n// console.log(alumnoCh);\n\n/* Propiedades dinamicas: */ /* en esta sume los nombres de la lista */\n\n// const obUsuarios = {\n//   usuario_5: \"david\"\n// }\n// const nombres = [\"jon\" , \"irma\" , \"miguel\" , \"sara\"]\n\n// nombres.forEach(\n//   (nombre , index) => (\n//     obUsuarios[`usuario_${index}`] = nombre\n//   )\n// )\n// console.log(obUsuarios);\n\n\n\n/* DEEP MATCHING: */\n\n// const usuario = {\n//   name: \"Felipe\" ,\n//   edad: 25 ,\n// }\n\n// let {name , edad} = usuario;\n// console.log(name , edad);\n\n\n/*  asignacion en desestructuracion */\n\n// let persona = [\"jon\" , \"smith\"];\n// let [nombre , apellido] = persona;\n\n// let [nombre , apellido] = \"jons smiths\".split(\" \")\n// console.log(nombre , apellido);\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;;AAGA;AACA;AACE;AACF;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}